<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemGroup>
    <None Include="..\..\..\..\Tools\CopyLibrary\CopyDLL" />
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{02F4D889-BBE5-4833-B11E-F1468128B2B7}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>CopyLibrary</RootNamespace>
    <WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)..\..\Bin\Tools\$(Configuration)_$(Platform)\</OutDir>
    <IntDir>$(SolutionDir)..\..\Intermediate\$(Configuration)_$(Platform)\$(ProjectName)\</IntDir>
    <NMakeBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>@echo off</NMakeCleanCommandLine>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)..\..\Bin\Tools\$(Configuration)_$(Platform)\</OutDir>
    <IntDir>$(SolutionDir)..\..\Intermediate\$(Configuration)_$(Platform)\$(ProjectName)\</IntDir>
    <NMakeBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>@echo off</NMakeCleanCommandLine>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)..\..\Bin\Tools\$(Configuration)_$(Platform)\</OutDir>
    <IntDir>$(SolutionDir)..\..\Intermediate\$(Configuration)_$(Platform)\$(ProjectName)\</IntDir>
    <NMakeBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>@echo off</NMakeCleanCommandLine>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)..\..\Bin\Tools\$(Configuration)_$(Platform)\</OutDir>
    <IntDir>$(SolutionDir)..\..\Intermediate\$(Configuration)_$(Platform)\$(ProjectName)\</IntDir>
    <NMakeBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd $(SolutionDir)\..\..\Tools\$(ProjectName)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f CopyDLL"</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>@echo off</NMakeCleanCommandLine>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>
      </Message>
    </PostBuildEvent>
    <CustomBuildStep />
    <CustomBuild>
      <Command>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd %(RootDir)%(Directory)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash --login -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f %(Filename)%(Extension)"</Command>
      <Outputs>$(OutDir).fakeout</Outputs>
    </CustomBuild>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>
      </Message>
    </PostBuildEvent>
    <CustomBuild>
      <Command>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd %(RootDir)%(Directory)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash --login -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f %(Filename)%(Extension)"</Command>
      <Outputs>$(OutDir).fakeout</Outputs>
    </CustomBuild>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>
      </Message>
    </PostBuildEvent>
    <CustomBuildStep />
    <CustomBuild>
      <Command>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd %(RootDir)%(Directory)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash --login -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f %(Filename)%(Extension)"</Command>
      <Outputs>$(OutDir).fakeout</Outputs>
    </CustomBuild>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>
      </Message>
    </PostBuildEvent>
    <CustomBuild>
      <Command>set Path=.;$(SolutionDir)..\..\Bin\Tools;$(SolutionDir)\..\..\Bin\Tools\cygwin\bin
set CHERE_INVOKING=1
set MAILCHECK=
cd %(RootDir)%(Directory)

REM set path to unix style, not in makefile becase makefile must be compatible in no cygwin env
set SrcPath=$(SolutionDir)..\..\Bin\$(Configuration)_$(Platform)\
for /F %%o in ( 'cygpath -u "%SrcPath%"' ) do ( set SrcPath=%%o)

set TargetPath=$(OutDir)
for /F %%d in ( 'cygpath -u "%TargetPath%"' ) do ( set TargetPath=%%d)

$(SolutionDir)\..\..\Bin\Tools\cygwin\bin\bash --login -c "make -j $(NUMBER_OF_PROCESSORS) -r -R -s -f %(Filename)%(Extension)"</Command>
      <Outputs>$(OutDir).fakeout</Outputs>
    </CustomBuild>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>